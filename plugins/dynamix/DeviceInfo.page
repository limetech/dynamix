Menu="Parity:1 Data:1 Cache:1"
Title="Device Settings"
Cond="($disks[$name]['status']!='DISK_NP')"
---
<?PHP
/* Copyright 2014, Lime Technology
 * Copyright 2014, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>

<?
$disk = $disks[$name];
$dev  = $disk['device'];
$off  = exec("hdparm -C /dev/$dev|awk '/active/{print $4}'") ? "" : "disabled";
$refs = array(); $n = 0;
foreach ($disks as $ref) {
  if ($ref['name']=='flash') continue;
  $refs[] = $ref['name'];
  if ($ref['name']==$name) $i = $n;
  $n++;
}
$end = count($refs)-1;
$prev = $i>0 ? $refs[$i-1] : $refs[$end];
$next = $i<$end ? $refs[$i+1] : $refs[0];
?>

<script>
function cleanUp() {
  if (document.hasFocus()) {
    $.post('/webGui/include/Download.php',{cmd:'delete',file:'<?="$path/$file"?>'});
    $.post('/webGui/include/Download.php',{cmd:'delete',file:'<?="$docroot/$file.rtf"?>'});
  } else {
    setTimeout(cleanUp,4000);
  }
}
function saveSMART() {
  $.post('/webGui/include/SmartInfo.php',{cmd:'save',port:'<?=$dev?>',file:'<?="$path/$file"?>'}, function() {
    $.post('/webGui/include/Download.php',{cmd:'save',raw:'windows',root:'<?=$docroot?>',file:'<?="$path/$file"?>'},function(data) {
      location = data;
      setTimeout(cleanUp,4000);
    });
  });
}
function testUpdate(init) {
  $.post('/webGui/include/SmartInfo.php',{cmd:'update',port:'<?=$dev?>',name:'<?=$disk['name']?>'},function(data) {
    $('#test_result').html(data);
    if (data.indexOf('%')>=0) {
      if (!init) timers.tester = setTimeout(testUpdate, 3000);
    } else {
      $('#short_test').val('Start');
      $('#long_test').val('Start');
<?if (!$off):?>
      $('#short_test').removeAttr('disabled');
      $('#long_test').removeAttr('disabled');
<?endif;?>
      $.removeCookie('tester.<?=$dev?>',{path:'/'});
    }
  });
}
function selftestLog() {
  $('#testlog').toggle('slow');
  var text = $('#toggle_log').val()=='Show' ? 'Hide' : 'Show';
  $('#toggle_log').val(text);
}
function errorLog() {
  $('#errorlog').toggle('slow');
  var text = $('#toggle_error').val()=='Show' ? 'Hide' : 'Show';
  $('#toggle_error').val(text);
}
function startShortTest() {
  if ($('#short_test').val()=='Start') {
    $('#short_test').val('Stop');
    $('#long_test').attr('disabled','disabled');
    $.cookie('tester.<?=$dev?>','short',{path:'/'});
    $.post('/webGui/include/SmartInfo.php',{cmd:'short',port:'<?=$dev?>'},function() {timers.tester = setTimeout(testUpdate,0);});
  } else {
    clearTimeout(timers.tester);
    $.removeCookie('tester.<?=$dev?>',{path:'/'});
    $.post('/webGui/include/SmartInfo.php',{cmd:'stop',port:'<?=$dev?>'}, function() {setTimeout(testUpdate,0);});
  }
}
function startLongTest() {
  if ($('#long_test').val()=='Start') {
    $('#long_test').val('Stop');
    $('#short_test').attr('disabled','disabled');
    $.cookie('tester.<?=$dev?>','long',{path:'/'});
    $.post('/webGui/include/SmartInfo.php',{cmd:'long',port:'<?=$dev?>'},function(){timers.tester = setTimeout(testUpdate,0);});
  } else {
    clearTimeout(timers.tester);
    $.removeCookie('tester.<?=$dev?>',{path:'/'});
    $.post('/webGui/include/SmartInfo.php',{cmd:'stop',port:'<?=$dev?>'}, function() {setTimeout(testUpdate,0);});
  }
}
$(function() {
  $('.tabs').append("<span class='status vhshift'><input type='button' value='Download' title='Download SMART report of <?=my_disk($name)?>' onclick='saveSMART()'><a href='/Main/Data?name=<?=$prev?>' title='Previous'><button type='button' style='margin-right:2px'><i class='fa fa-chevron-left'></i></button></a><a href='/Main/Data?name=<?=$next?>' title='Next'><button type='button'><i class='fa fa-chevron-right'></i></button></a></span>");
  var tester = $.cookie('tester.<?=$dev?>');
  testUpdate(tester===undefined);
  if (tester !== undefined) $('#'+tester+'_test').val('Stop').removeAttr('disabled');
<?if (!$off):?>
  $('#toggle_log').removeAttr('disabled');
  $('#toggle_error').removeAttr('disabled');
<?endif;?>
});
</script>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame">
Name:
: <?=my_disk($name)?>

Partition size:
: <?=my_number($disk['size'])?> KB (K=1024)

Partition format:
: <?=$disk['format']?>

File system status:
: <?=$disk['fsStatus']?><?if ($disk['fsError']) echo " - {$disk['fsError']}";?>&nbsp;

<?if ($disk['type']=="Data" || ($disk['type']=="Cache" && $var['SYS_CACHE_SLOTS']==1)):?>
<?if ($var['fsState']=="Stopped"):?>

File system type:
: <select name="diskFsType.<?=$disk['idx'];?>" size="1">
  <?=mk_option($disk['fsType'], "auto", "auto")?>
  <?=mk_option($disk['fsType'], "btrfs", "btrfs")?>
  <?=mk_option($disk['fsType'], "reiserfs", "reiserfs")?>
  <?=mk_option($disk['fsType'], "xfs", "xfs")?>
  </select>

<?else:?>

File system type:
: <select name="diskFsType.<?=$disk['idx'];?>" size="1" disabled>
  <?=mk_option($disk['fsType'], "auto", "auto")?>
  <?=mk_option($disk['fsType'], "btrfs", "btrfs")?>
  <?=mk_option($disk['fsType'], "reiserfs", "reiserfs")?>
  <?=mk_option($disk['fsType'], "xfs", "xfs")?>
  </select> Array must be stopped to change

<?endif;?>
<?elseif ($disk['type']=="Cache" && $var['SYS_CACHE_SLOTS']>1):?>

File system type:
: <?=$disk['fsType'];?>&nbsp;

<?endif;?>

Spin down delay:</td>
: <select name="diskSpindownDelay.<?=$disk['idx']?>" size="1">
  <?=mk_option($disk['spindownDelay'], "-1", "Use default")?>
  <?=mk_option($disk['spindownDelay'], "0",  "Never")?>
  <?=mk_option($disk['spindownDelay'], "15", "15 minutes")?>
  <?=mk_option($disk['spindownDelay'], "30", "30 minutes")?>
  <?=mk_option($disk['spindownDelay'], "45", "45 minutes")?>
  <?=mk_option($disk['spindownDelay'], "1",  "1 hour")?>
  <?=mk_option($disk['spindownDelay'], "2",  "2 hours")?>
  <?=mk_option($disk['spindownDelay'], "3",  "3 hours")?>
  <?=mk_option($disk['spindownDelay'], "4",  "4 hours")?>
  <?=mk_option($disk['spindownDelay'], "5",  "5 hours")?>
  <?=mk_option($disk['spindownDelay'], "6",  "6 hours")?>
  <?=mk_option($disk['spindownDelay'], "7",  "7 hours")?>
  <?=mk_option($disk['spindownDelay'], "8",  "8 hours")?>
  <?=mk_option($disk['spindownDelay'], "9",  "9 hours")?>
  </select>

<?if (($var['spinupGroups']=="yes")&&($disk['name']!="cache")):?>

Spinup group(s):
: <input type="text" name="diskSpinupGroup.<?=$disk['idx'];?>" maxlength="256" value="<?=$disk['spinupGroup']?>">

<?endif;?>

&nbsp;
: <input type="submit" name="changeDisk" value="Apply"><input type="button" value="Done" onclick="done()">

</form>
<?if ($name=="cache" && $var['SYS_CACHE_SLOTS']>1):?>

Pool info:
: <?echo "<pre>".shell_exec("/sbin/btrfs filesystem show {$disk['uuid']}")."</pre>";?>

> This is the output of *btrfs filesystem show /mnt/cache*.

<?if ($var['cacheSbNumDisks']>1):?>
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<?if ($disk['fsStatus']=="Mounted"):?>
<?exec("/sbin/btrfs balance status /mnt/{$disk['name']}", $balance_status, $retval);?>

Balance status:
: <?echo "<pre>" . implode("\n", $balance_status) . "</pre>";?>

> This is the output of *btrfs balance status /mnt/cache*.

<?if (strstr(implode($balance_status), "running")===FALSE):?>
<input type="hidden" name="#command" value="/sbin/btrfs balance start">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$disk['name']?>">
<input type="hidden" name="#arg[3]" value="&>/dev/null &">

&nbsp;
: <input type="submit" value="Balance"><input type="text" name="#arg[1]" maxlength="256" value="-dconvert=raid1 -mconvert=raid1"> Options (see Help)

> **Balance** will run the *btrfs balance* program to restripe the extents across all pool devices.
>
> The default *Options* are appropriate for btrfs-raid1.  Do not change this unless you know what you are doing!

<?else:?>
<input type="hidden" name="#command" value="/sbin/btrfs balance cancel /mnt/<?=$disk['name']?>">

&nbsp;
: <input type="submit" value="Cancel"> *Running*

> **Cancel** will cancel the balance operation in progress.

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="Balance" disabled>

> **Balance** is only available when the Device is Mounted.

<?endif;?>
</form>
<?endif;?>
<?endif;?>
<?if ($disk['fsType']=="btrfs"):?>
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<?if ($disk['fsStatus']=="Mounted"):?>
<?$scrub_cmd = "/sbin/btrfs scrub start -B";?>
<?exec("/sbin/btrfs scrub status /mnt/{$disk['name']}", $scrub_status, $retval);?>

Scrub status:
: <?echo "<pre>" . implode("\n", $scrub_status) . "</pre>";?>

> This is the output of *btrfs scrub status /mnt/cache*.

<?if (exec("/usr/local/sbin/background status $scrub_cmd")==""):?>
<input type="hidden" name="#command" value="<?=$scrub_cmd?>">
<input type="hidden" name="#arg[2]" value="/mnt/<?=$disk['name']?>">
<input type="hidden" name="#arg[3]" value="&>/dev/null &">

&nbsp;
: <input type="submit" value="Scrub"><input type="text" name="#arg[1]" maxlength="256" value="-r"> Options (see Help)

> **Scrub** will open a window and run the *btrfs scrub* program to check file system integrity device.
>
> The *Options* field is initialized to include *-r* which specifies read-only.  If repair is needed, you should run
> a second Scrub pass, removing the *-r* option; this will permit *btrfs scrub* to fix the file system.

<?else:?>
<input type="hidden" name="#command" value="/sbin/btrfs scrub cancel /mnt/<?=$disk['name']?>">

&nbsp;
: <input type="submit" value="Cancel"> *Running*

> **Cancel** will cancel the Scrub operation in progress.

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="Scrub" disabled>

> **Scrub** is only available when the Device is Mounted.

<?endif;?>
</form>
<?endif;?>
<?if ($disk['fsType']=="reiserfs"):?>
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<?if ($var['fsState']=="Started" && $var['startMode']=='Maintenance'):?>
<?$check_cmd = "reiserfsck /dev/{$disk['deviceSb']} --yes --quiet";?>
<?$status_file = "/var/lib/reiserfs/check.status.{$disk['id']}";?>
<?$check_status = @file($status_file);?>
<?if ($check_status === FALSE) $check_status = array("Not available");?>

Check Filesystem status:
: <?echo "<pre>" . implode("\n", $check_status) . "</pre>";?>

> This is the latest *file system check* status.

<?if (exec("/usr/local/sbin/background status $check_cmd")==""):?>
<input type="hidden" name="#command" value="/usr/local/sbin/background start <?=$status_file?> <?=$check_cmd?>">

&nbsp;
: <input type="submit" value="Check"><input type="text" name="#arg[1]" maxlength="256" value=""> Options (see Help)

> **Check Filesystem** will run the *reiserfsck* program to check file system integrity on the device.
>
> The *Options* field may be filled in with specific options used to fix problems in the file system. Typically, you
> first run a Check Filesytem pass leaving *Options* blank.  Upon completion, if *reiserfsck* finds any problems, you must
> run a second Check Filesystem pass, using a specific option as instructed by the first *reiserfsck* pass.
>
> After starting a Check Filesystem, you should Refresh to monitor progress and status.  Depending on
> how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
> Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
> increasing for the device on the Main page.

<?else:?>
<input type="hidden" name="#command" value="/usr/local/sbin/background cancel <?=$check_cmd?>">

&nbsp;
: <input type="submit" value="Cancel"> *Running*

> **Cancel** will cancel the Check Filesystem operation in progress.

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="Check" disabled>

> **Check Fileystem** is only available when array is Started in **Mainenance** mode.

<?endif;?>
</form>
<?endif;?>
<?if ($disk['fsType']=="xfs"):?>
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<?if ($var['fsState']=="Started" && $var['startMode']=='Maintenance'):?>
<?$check_cmd = "xfs_repair /dev/{$disk['deviceSb']}";?>
<?$status_file = "/var/lib/xfs/check.status.{$disk['id']}";?>
<?$check_status = @file($status_file);?>
<?if ($check_status === FALSE) $check_status = array("Not available");?>

Check Filesystem status:
: <?echo "<pre>" . implode("\n", $check_status) . "</pre>";?>

> This is the latest *file system check* status.

<?if (exec("/usr/local/sbin/background status $check_cmd")==""):?>
<input type="hidden" name="#command" value="/usr/local/sbin/background start <?=$status_file?> <?=$check_cmd?>">

&nbsp;
: <input type="submit" value="Check"><input type="text" name="#arg[1]" maxlength="256" value="-n"> Options (see Help)

> **Check Filesystem** will run the *xfs_repair* program to check file system integrity on the device.
>
> The *Options* field is initialized with *-n* which specifies check-only.  If repair is needed, you should run
> a second Check Filesystem pass, setting the *Options* blank; this will permit *xfs_repair* to fix the file system.
>
> After starting a Check Filesystem, you should Refresh to monitor progress and status.  Depending on
> how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
> Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
> increasing for the device on the Main page.

<?else:?>
<input type="hidden" name="#command" value="/usr/local/sbin/background cancel <?=$check_cmd?>">

&nbsp;
: <input type="submit" value="Cancel"> *Running*

> **Cancel** will cancel the Check Filesystem operation in progress.

<?endif;?>
<?else:?>

&nbsp;
: <input type="submit" value="Check" disabled>

> **Check Fileystem** is only available when array is Started in **Mainenance** mode.

<?endif;?>
</form>
<?endif;?>

<div id="title"><span class="left"><img src="/plugins/dynamix/icons/self-test.png" class="icon">Self-Test</span></div>
<div markdown="1">
SMART self-test history:
: <input type="button" value="Show" id="toggle_log" onclick="selftestLog()" disabled>

<?if (!$off):?>
<pre id="testlog" style="display:none"><?=shell_exec("smartctl -l selftest /dev/$dev|awk 'NR>5'");?></pre>
<?endif;?>

SMART error log:
: <input type="button" value="Show" id="toggle_error" onclick="errorLog()" disabled>

<?if (!$off):?>
<pre id="errorlog" style="display:none"><?=shell_exec("smartctl -l error /dev/$dev|awk 'NR>5'");?></pre>
<?endif;?>

SMART short self-test:
: <input type='button' value='Start' id='short_test' onclick="startShortTest()" disabled>

SMART extended self-test:
: <input type='button' value='Start' id='long_test' onclick="startLongTest()" disabled>

Last SMART test result:
: <span id="test_result"></span>
</div>